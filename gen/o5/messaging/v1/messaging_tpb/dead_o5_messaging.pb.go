// Code generated by protoc-gen-go-o5-messaging. DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: o5/messaging/v1/topic/dead.proto

package messaging_tpb

import (
	context "context"

	o5msg "github.com/pentops/o5-messaging/o5msg"
)

// Service: DeadMessageTopic
// Method: Dead

func (msg *DeadMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.messaging.v1.topic.DeadMessageTopic",
		GrpcMethod:       "Dead",
		Headers:          map[string]string{},
		DestinationTopic: "dead-letter",
	}
	return header
}

type DeadMessageTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewDeadMessageTopicTxSender[C any](sender o5msg.TxSender[C]) *DeadMessageTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.messaging.v1.topic.DeadMessageTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Dead",
				Message: (*DeadMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeadMessageTopicTxSender[C]{sender: sender}
}

type DeadMessageTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewDeadMessageTopicCollector[C any](collector o5msg.Collector[C]) *DeadMessageTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.messaging.v1.topic.DeadMessageTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Dead",
				Message: (*DeadMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeadMessageTopicCollector[C]{collector: collector}
}

type DeadMessageTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewDeadMessageTopicPublisher(publisher o5msg.Publisher) *DeadMessageTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "o5.messaging.v1.topic.DeadMessageTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Dead",
				Message: (*DeadMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeadMessageTopicPublisher{publisher: publisher}
}

// Method: Dead

func (send DeadMessageTopicTxSender[C]) Dead(ctx context.Context, sendContext C, msg *DeadMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect DeadMessageTopicCollector[C]) Dead(sendContext C, msg *DeadMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish DeadMessageTopicPublisher) Dead(ctx context.Context, msg *DeadMessage) error {
	return publish.publisher.Publish(ctx, msg)
}
